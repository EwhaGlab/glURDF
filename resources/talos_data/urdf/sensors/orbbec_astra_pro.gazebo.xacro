<?xml version="1.0"?>
<!--

  Copyright (c) 2013, PAL Robotics, S.L.
  All rights reserved.

  This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/3.0/ or send a letter to
  Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.

  ROS Gazebo plugin for RGBD sensor (OpenNI/Kinect/ASUS)
   * Publishes MONO8 format "depth" image & PointCloud
   * Publishes RGB8 format color image & 2nd copy of PointCloud (for registered)

  Configuration according with:
  https://orbbec3d.com/product-astra-pro/
-->
<robot xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:macro name="orbbec_astra_pro_rgbd_camera_gazebo" params="name">
    <gazebo reference="${name}_link">
      <!-- IR + depth -->
      <sensor type="depth" name="${name}_frame_sensor">
        <always_on>true</always_on>
        <update_rate>30.0</update_rate>
        <camera>
          <horizontal_fov>${60.0 * deg_to_rad}</horizontal_fov>
          <image>
            <format>B8G8R8</format>
            <width>640</width>
            <height>480</height>
          </image>
          <clip>
            <near>0.6</near>
            <far>8.0</far>
          </clip>
        </camera>
        <plugin name="${name}_frame_controller" filename="libgazebo_ros_openni_kinect.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>30.0</updateRate>
          <cameraName>${name}</cameraName>
          <imageTopicName>rgb/image_raw</imageTopicName>
          <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
          <depthImageTopicName>depth/image_raw</depthImageTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>depth/points</pointCloudTopicName>
          <frameName>${name}_optical_frame</frameName>
          <pointCloudCutoff>0.45</pointCloudCutoff>
          <rangeMax>10.0</rangeMax>
          <distortionK1>0.00000001</distortionK1>
          <distortionK2>0.00000001</distortionK2>
          <distortionK3>0.00000001</distortionK3>
          <distortionT1>0.00000001</distortionT1>
          <distortionT2>0.00000001</distortionT2>
        </plugin>
      </sensor>

      <!-- RGB High res-->
      <sensor type="camera" name="${name}_high_res_frame_sensor">
        <update_rate>30.0</update_rate>
        <camera name="head">
          <horizontal_fov>${60.0 * deg_to_rad}</horizontal_fov>
          <image>
            <width>1280</width>
            <height>720</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.05</near>
            <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                 That pixel's noise value is added to each of its color
                 channels, which at that point lie in the range [0,1]. -->
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name="${name}_high_res_frame_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <!-- Patch to publish at 30 Hz -->
          <updateRate>45.0</updateRate>
          <cameraName>${name}/high_res</cameraName>
          <imageTopicName>/${name}/rgb/high_res/image_raw</imageTopicName>
          <cameraInfoTopicName>/${name}/rgb/high_res/camera_info</cameraInfoTopicName>
          <frameName>${name}_optical_frame</frameName>
          <hackBaseline>0.0</hackBaseline>
          <distortionK1>0.00000001</distortionK1>
          <distortionK2>0.00000001</distortionK2>
          <distortionK3>0.00000001</distortionK3>
          <distortionT1>0.00000001</distortionT1>
          <distortionT2>0.00000001</distortionT2>
        </plugin>
      </sensor>
      <material>Gazebo/FlatBlack</material>
    </gazebo>
  </xacro:macro>
</robot>
